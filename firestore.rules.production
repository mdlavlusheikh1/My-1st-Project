rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // PRODUCTION SECURITY RULES
    // Implements strict role-based access control with school isolation
    
    // ==================== HELPER FUNCTIONS ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserData().role in roles;
    }
    
    function isSameSchool(schoolId) {
      return isAuthenticated() && getUserData().schoolId == schoolId;
    }
    
    function isActiveUser() {
      return isAuthenticated() && getUserData().isActive == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isSuperAdmin() {
      return hasRole('super_admin');
    }
    
    function isSchoolAdmin() {
      return hasRole('school_admin');
    }
    
    function isTeacher() {
      return hasRole('teacher');
    }
    
    function isStudent() {
      return hasRole('student');
    }
    
    function isParent() {
      return hasRole('parent');
    }
    
    // Validate that user cannot escalate their own privileges
    function cannotEscalateRole() {
      return !('role' in request.resource.data) || 
             request.resource.data.role == resource.data.role ||
             isSuperAdmin();
    }
    
    // Validate required fields for new users
    function hasValidUserFields() {
      return request.resource.data.keys().hasAll(['email', 'name', 'role', 'isActive', 'createdAt']) &&
             request.resource.data.role in ['super_admin', 'school_admin', 'teacher', 'student', 'parent'];
    }
    
    // ==================== USERS COLLECTION ====================
    
    match /users/{userId} {
      // Read: Users can read their own data, admins can read users in their school
      allow read: if isActiveUser() && (
        isOwner(userId) ||
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId)) ||
        (isTeacher() && isSameSchool(resource.data.schoolId))
      );
      
      // Create: Only during signup with basic role, or by admins
      // IMPORTANT: Super admin creation must be done manually in Firebase Console
      allow create: if (
        // Self-registration with student/parent role only
        (request.auth.uid == userId && 
         request.resource.data.role in ['student', 'parent'] &&
         hasValidUserFields()) ||
        // Super admin can create any user
        isSuperAdmin() ||
        // School admin can create users in their school (except super_admin)
        (isSchoolAdmin() && 
         isSameSchool(request.resource.data.schoolId) &&
         request.resource.data.role in ['school_admin', 'teacher', 'student', 'parent'])
      );
      
      // Update: Users can update their own profile (except role), admins can update users
      allow update: if isActiveUser() && (
        (isOwner(userId) && cannotEscalateRole()) ||
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId) && cannotEscalateRole())
      );
      
      // Delete: Only super admin can delete users
      allow delete: if isSuperAdmin();
    }
    
    // ==================== SCHOOLS COLLECTION ====================
    
    match /schools/{schoolId} {
      // Read: Active users can read their own school, super admin can read all
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(schoolId)
      );
      
      // Create: Only super admin can create schools
      allow create: if isSuperAdmin();
      
      // Update: Super admin or school admin of that school
      allow update: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(schoolId))
      );
      
      // Delete: Only super admin
      allow delete: if isSuperAdmin();
    }
    
    // ==================== CLASSES COLLECTION ====================
    
    match /classes/{classId} {
      // Read: Users can read classes in their school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update: Super admin or school admin/teacher in same school
      allow create, update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Delete: Super admin or school admin only
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId))
      );
    }
    
    // ==================== STUDENTS COLLECTION ====================
    
    match /students/{studentId} {
      // Read: Users can read students in their school, students can read their own data
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId) ||
        (isStudent() && resource.data.userId == request.auth.uid) ||
        (isParent() && resource.data.userId in getUserData().childrenIds)
      );
      
      // Create: Super admin or school admin/teacher in same school
      allow create: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Update: Super admin, school admin/teacher in same school, or student updating own data
      allow update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(resource.data.schoolId)) ||
        (isStudent() && resource.data.userId == request.auth.uid && cannotEscalateRole())
      );
      
      // Delete: Super admin or school admin only
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId))
      );
    }
    
    // ==================== ATTENDANCE RECORDS ====================
    
    match /attendanceRecords/{recordId} {
      // Read: Users can read attendance in their school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId) ||
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        (isParent() && resource.data.studentId in getUserData().childrenIds)
      );
      
      // Create: Teachers and admins can mark attendance
      allow create: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Update: Only within same day, by teachers/admins
      allow update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && 
         isSameSchool(resource.data.schoolId) &&
         request.time.toMillis() - resource.data.createdAt.toMillis() < 86400000) // 24 hours
      );
      
      // Delete: Super admin only (for corrections)
      allow delete: if isSuperAdmin();
    }
    
    // ==================== ATTENDANCE SESSIONS ====================
    
    match /attendanceSessions/{sessionId} {
      // Read: Users in same school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update: Teachers and admins
      allow create, update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Delete: School admin and super admin
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId))
      );
    }
    
    // ==================== SUBJECTS COLLECTION ====================
    
    match /subjects/{subjectId} {
      // Read: Users in same school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update/Delete: School admin and super admin
      allow create, update, delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(request.resource.data.schoolId))
      );
    }
    
    // ==================== NOTIFICATIONS ====================
    
    match /notifications/{notificationId} {
      // Read: User can read their own notifications
      allow read: if isActiveUser() && (
        resource.data.userId == request.auth.uid ||
        isSuperAdmin()
      );
      
      // Create: Admins and teachers can create notifications
      allow create: if isActiveUser() && hasAnyRole(['super_admin', 'school_admin', 'teacher']);
      
      // Update: Only the recipient can mark as read
      allow update: if isActiveUser() && resource.data.userId == request.auth.uid;
      
      // Delete: Super admin or recipient
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        resource.data.userId == request.auth.uid
      );
    }
    
    // ==================== QR CODES ====================
    
    match /qrCodes/{qrCodeId} {
      // Read: Users in same school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update: School admin and teachers
      allow create, update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Delete: School admin and super admin
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId))
      );
    }
    
    // ==================== REPORTS ====================
    
    match /reports/{reportId} {
      // Read: Users in same school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update: Admins and teachers
      allow create, update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Delete: School admin and super admin
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId))
      );
    }
    
    // ==================== MEDIA COLLECTION ====================
    
    match /media/{mediaId} {
      // Read: Users in same school
      allow read: if isActiveUser() && (
        isSuperAdmin() ||
        isSameSchool(resource.data.schoolId)
      );
      
      // Create/Update: Admins and teachers
      allow create, update: if isActiveUser() && (
        isSuperAdmin() ||
        (hasAnyRole(['school_admin', 'teacher']) && isSameSchool(request.resource.data.schoolId))
      );
      
      // Delete: Owner, school admin, or super admin
      allow delete: if isActiveUser() && (
        isSuperAdmin() ||
        (isSchoolAdmin() && isSameSchool(resource.data.schoolId)) ||
        resource.data.uploadedBy == request.auth.uid
      );
    }
    
    // ==================== SYSTEM LOGS (AUDIT TRAIL) ====================
    
    match /systemLogs/{logId} {
      // Read: Super admin only
      allow read: if isSuperAdmin();
      
      // Create: Any authenticated user (for logging)
      allow create: if isAuthenticated();
      
      // Update/Delete: Never allowed (immutable logs)
      allow update, delete: if false;
    }
    
    // ==================== DENY ALL OTHER PATHS ====================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
